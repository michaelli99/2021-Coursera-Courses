In the R script, I implemented 1, 10, 100, and 1000 to each of the four factorial functions and 
compared the processing time with microbenchmark and autoplot functions.

In the following content, I refer to Factorial_loop as function 1, Factorial_reduce as function 2,
Factorial_func as function 3, and Factorial_mem as function 4.

The test results were pasted below:

Factorial 1, times = 100
Unit: nanoseconds
                                     expr    min     lq   mean median     uq    max neval
   Function_1 <- Factorial_loop(test_num)    700    950   2074   1250   1500  45100   100
 Function_2 <- Factorial_reduce(test_num) 106700 108800 128165 109900 113500 619900   100
   Function_3 <- Factorial_func(test_num)    800   1000   1624   1200   1600  34300   100
    Function_4 <- Factorial_mem(test_num)    700    850   1878   1200   1400  54800   100

The result for factorial 1 showed that function 4 has the shortest mean processing time, and 
function 1, 3, and 2 ranked second, third, and fourth. Function 2's mean processing time was more 
than 100 times than that of function 4.

Factorial 10, times = 100
Unit: microseconds
                                     expr   min     lq    mean median     uq   max neval
   Function_1 <- Factorial_loop(test_num)   1.0   1.20   1.634   1.45   1.85   5.7   100
 Function_2 <- Factorial_reduce(test_num) 132.4 135.35 168.763 137.20 149.05 645.2   100
   Function_3 <- Factorial_func(test_num)   5.3   5.50   7.096   6.00   6.30  46.3   100
    Function_4 <- Factorial_mem(test_num)   1.6   1.80   2.548   2.25   2.80  18.8   100

The result for factorial 10 showed that function 1 had the shortest processing time while 
function 4, 3, and 2 ranked second, third, and fourth. Function 2 had a mean processing time of 
168.763 microseconds, which is 100 times more than that of Function 1 (1.634 microseconds).

Factorial 100, times = 100
Unit: microseconds
                                     expr   min     lq    mean median     uq   max neval
   Function_1 <- Factorial_loop(test_num)   2.6   2.90   3.867   3.30   3.75  42.0   100
 Function_2 <- Factorial_reduce(test_num) 351.9 360.95 394.422 365.70 402.15 798.7   100
   Function_3 <- Factorial_func(test_num)  48.9  51.20  60.678  53.40  57.65 162.8   100
    Function_4 <- Factorial_mem(test_num)   1.6   2.00   4.646   3.05   3.55 126.6   100

The result for factorial 100 showed that function 1 had the shortest processing time while 
function 4, 3, and 2 ranked second, third, and fourth. Function 3's mean processing time is 
significantly greater than that of function 1 and 4's, and function 2's mean processing time is 
significantly greater than that of other functions.

Factorial 1000, times = 100
Unit: microseconds
                                     expr    min      lq     mean  median      uq    max neval
   Function_1 <- Factorial_loop(test_num)   17.4   18.90   25.601   21.10   23.40  103.0   100
 Function_2 <- Factorial_reduce(test_num) 2559.2 2800.45 3457.451 2949.65 3351.75 7468.3   100
   Function_3 <- Factorial_func(test_num)  521.3  688.75  993.741  818.75 1027.25 4386.6   100
    Function_4 <- Factorial_mem(test_num)    1.7    2.50   46.796    6.25    9.35 3802.2   100

The result for factorial 1000 showed that function 1 had the shortest processing time while 
function 4, 3, and 2 ranked second, third, and fourth. Function 3's mean processing time is 
significantly greater than that of function 1 and 4's, and function 2's mean processing time is 
significantly greater than that of other functions.

Overall, function 1 (the 'for' loop) is the fastest on processing the factorial and function 2 ( 
the 'reduce' function) is the slowest. Function 4 (memoization function) performed better with 
larger datasets while function 3 (recursion) performed better with smaller datasets. 